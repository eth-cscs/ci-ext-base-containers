#!/usr/bin/env python3

import fileinput
import re
import sys
import subprocess

# Spack can either install packages from a build cache or to compile them.
# However, Spack can't install from a build cache and compile as a fallback if the package is not in the build cache.
# In order to have this functionality, we have to implement itimodifying the "spack install" call in the makefile generated by Spack.
# We first install from the build cache and if it fails, only then we compile the package.

# This script replaces "spack install" call in a makefile, one of these
# Spack-0.18
#+$(SPACK) -e '/opt/spack-environment' install $(SPACK_INSTALL_FLAGS) --only-concrete --only=package --no-add /$(notdir $@) && touch $@
# Spack 0.19
#+$(SPACK) -e '/opt/spack-environment' install $(SPACK_BUILDCACHE_FLAG) $(SPACK_INSTALL_FLAGS) --only-concrete --only=package --no-add /$(notdir $@) # $(SPEC)
# Spack 0.20
#+$(SPACK) -e '/opt/spack-environment' install $(SPACK_BUILDCACHE_FLAG) $(SPACK_INSTALL_FLAGS) --only-concrete --only=package /$(HASH) # $(SPEC)

# with something like this
# Spack 0.19
# TODO
# Spack 0.20
# TODO

spack_out = subprocess.run(["spack", "--version"], capture_output=True, text=True)
spack_version = spack_out.stdout.strip()
match spack_version:
    case "0.18.1":
        # TODO
        install_regex = re.compile(r'\t\+\$\(SPACK\) -e .*--only-concrete --only=package --no-add /\$\(notdir \$@\) (.*)')
    case "0.19.2":
        install_regex = re.compile(r'\t\+\$\(SPACK\) -e .*--only-concrete --only=package --no-add /\$\(notdir \$@\) (.*)')
    case "0.20.1":
        install_regex = re.compile(r'\t\+\$\(SPACK\) -e .*--only-concrete --only=package /\$\(HASH\) (.*)')
    case _:
        install_regex = re.compile(r'\t\+\$\(SPACK\) -e .*--only-concrete --only=package /\$\(HASH\) (.*)')

found_install = False
for line in fileinput.input():
    match = install_regex.match(line)
    if match:
        found_install = True
        # remove the tab at start of line AND the part at the end of the line (comment for spack-0.19, touch $@ for spack-0.18)
        install_line = match[0].replace(match[1], '|| \\')[2:]
        if install_line.find('$(SPACK_BUILDCACHE_FLAG)') != -1:
            install_line_cache = install_line.replace('$(SPACK_BUILDCACHE_FLAG)', '--cache-only')
            install_line_nocache = install_line.replace('$(SPACK_BUILDCACHE_FLAG)', '--no-cache').replace(' || \\', ' && \\')
        else:
            assert install_line.find(' install ') != -1
            install_line_cache = install_line.replace(' install ', ' install --cache-only ')
            install_line_nocache = install_line.replace(' install ', ' install --no-cache ').replace(' || \\', ' && \\')
        print(f'\t+{install_line_cache}')
        print(f'\t  ( {install_line_nocache}')
        print(f"\t    ( $(SPACK) -e '/opt/spack-environment' buildcache create --allow-root --rebuild-index --force -m s3_cscs_buildcache --only=package /$(notdir $@) || true ) ) # $(SPEC)")
        if match[1].find('touch $@') != -1:
            print('\t@touch $@')
    else:
        sys.stdout.write(line)

exit(0 if found_install else 1)
